import streamlit as st
import yfinance as yf
import matplotlib.pyplot as plt

# Dictionnaires de tickers et descriptions
tickers = {
    "Tech": ["STM", "SOI.PA", "MSFT", "NVDA", "ARM"],
    "D√©fense": ["HO.PA", "NATO", "ALNSE.PA"],
    "√ânergie": ["ALHRS.PA", "TTE", "ALO.PA", "ORA.PA", "SLB", "EDF"]
}

descriptions = {
    "Tech": "Tech ‚Äì Technologies avanc√©es, semi-conducteurs, intelligence artificielle...",
    "D√©fense": "D√©fense ‚Äì Mat√©riel militaire, cybers√©curit√©, t√©l√©coms, infrastructures critiques...",
    "√ânergie": "√ânergies ‚Äì Hydrog√®ne, nucl√©aire, renouvelables, p√©trole..."
}
descriptions_tick = {
    "STM": "STMicroelectronics - semi-conducteurs pour auto, IoT, industrie",
    "SOI.PA": "Soitec - mat√©riaux avanc√©s pour semi-conducteurs",
    "MSFT": "Microsoft - logiciels, cloud Azure, IA",
    "NVDA": "NVIDIA Corporation - entreprise tech am√©ricaine",
    "ARM": "Arm Holdings plc - conception de microprocesseurs (CPU, GPU, NPU)",
    "HO.PA": "Thales - d√©fense, s√©curit√©, √©lectronique embarqu√©e",
    "NATO": "Themes Transatlantic Defense ETF - fonds indiciel d'entreprises (d√©fense et a√©rospatial)",
    "ALNSE.PA": "NSE Group - syst√®mes embarqu√©s, √©lectronique critique",
    "ALHRS.PA": "Hydrogen Refueling Solutions (HRS) - fabricant fran√ßais de stations hydrog√®ne",
    "TTE": "TotalEnergies - √©nergie, p√©trole, transition verte",
    "ALO.PA": "Alstom S.A. - transport ferroviaire mondial",
    "ORA.PA": "Orange S.A. - op√©rateur t√©l√©com majeur en Europe",
    "SLB": "Schlumberger - services p√©troliers mondiaux",
    "EDF": "EDF - √©lectricit√©, nucl√©aire, renouvelables"
}

# Interface Streamlit
st.title("Interface bourse")

# S√©lection du secteur
secteur = st.selectbox("Choisis un secteur :", list(tickers.keys()))
st.write(f"**Description du secteur** : {descriptions.get(secteur)}")

# S√©lection du ticker
ticker = st.selectbox("Choisis un ticker :", tickers[secteur])
st.write(f"**Description du ticker** : {descriptions_tick.get(ticker)}")

# Affichage des infos
if st.button("Afficher les infos"):
    try:
        action = yf.Ticker(ticker)
        data = action.history(period="1d")
        open_price = data["Open"].iloc[-1]
        close_price = data["Close"].iloc[-1]
        variation_pct = ((close_price - open_price) / open_price) * 100
        dividende = action.info.get("dividendRate", None)

        st.metric(label="Cours actuel", value=f"{close_price:.2f} ‚Ç¨", delta=f"{variation_pct:.2f} %")
        st.write(f"**Dividende annuel** : {dividende:.2f} ‚Ç¨" if dividende else "Pas de dividende")
    except Exception as e:

        st.error(f"Erreur : {str(e)}")


#R√©cup√©ration des donn√©es sur 1 mois
historique=action.history(period="1mo")

if not historique.empty:
    fig, ax = plt.subplots()
    ax.plot(historique.index, historique["Close"], marker="o", linestyle="-", color="blue")
    ax.set_title(f"√âvolution du cours de {ticker} ‚Äì 1 mois")
    ax.set_xlabel("Date")
    ax.set_ylabel("Cours de cl√¥ture (‚Ç¨)")
    ax.grid(True)
    st.pyplot(fig)
else:
    st.warning("Pas de donn√©es disponibles pour ce ticker sur 1 mois.")

#R√©cup√©ration des donn√©es
st.dataframe(historique[["Close"]])
st.download_button(
    label="üì• T√©l√©charger les donn√©es (CSV)",
    data=historique.to_csv().encode("utf-8"),
    file_name=f"{ticker}_1mo.csv",
    mime="text/csv"
)


